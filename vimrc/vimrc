" autocommands
if has("autocmd")
  au!
  autocmd filetype java setlocal omnifunc=javacomplete#Complete
else
  set autoindent
endif
" autocommands end

" general
syntax on
filetype plugin indent on
set number
set showcmd
set hidden
set autochdir
set incsearch
set hlsearch
set nobackup
set showmatch
set wildmenu
set ignorecase
set infercase
set notextmode
set autoread
set backspace=indent,eol,start

" indent
set tabstop=2
set shiftwidth=2
set smartindent
set expandtab

" max width = 79
set textwidth=79
if v:version > 702
  set colorcolumn=79
endif

" formats
set fileformats=unix,dos

" folder
set foldmethod=marker

" encoding
" set encoding=utf-8
set fileencodings=utf-8,chinese

" look and feel
if has("gui_running")
	set go=cegrLtbm
    "set langmenu=zh_CN.UTF-8
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    set background=light
else
    set t_Co=256
    set background=dark
endif

if has("mouse")
    set mouse=a
endif
set cursorline
set cursorcolumn
set laststatus=2
set statusline=%<%F%h%m%r%h%w%y\ %=\|%{&ff}\|Ln:\ %l\ Col:\ %c
colorscheme wombat 

" text format
if has("win32")
	set gfn=Consolas:h11:cANSI
  source $VIMRUNTIME/mswin.vim
  behave mswin
else
    set gfn=Consolas\ 11
endif

" spell check
set spelllang=en
set spellsuggest=5

" autocomplete
set complete=.,t,d,i
set completeopt=menu,menuone

" tabline
set showtabline=2
function! GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)

  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor

  " Append the number of windows in the tab page if more than one
  let wincount = tabpagewinnr(v:lnum, '$')
  if wincount > 1
    let label .= wincount
  endif
  if label != ''
    let label .= ' '
  endif

  " Append the buffer name
  return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
endfunction

set guitablabel=%{GuiTabLabel()}
" tabline end

" ctags
let Tlist_Show_One_file = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_SingleClick = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Process_File_Always = 0
map <F9> :!ctags -R<cr>
map <F2> :TlistToggle<cr>
" ctags end

map <space> <c-f>

" toggle search highlight
nnoremap <c-l> :set hlsearch!<cr>
